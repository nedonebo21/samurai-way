{"version":3,"file":"static/js/866.51adb9f8.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/profile/ui/profile-info/profile-info.module.css?4115","webpack://samurai-way/./src/components/profile/ui/profile-info/description/description.module.css?2c06","webpack://samurai-way/./src/shared/ui/profile-avatar/profile-avatar.module.css?9f8e","shared/ui/profile-avatar/profile-avatar.tsx","components/profile/ui/profile-info/description/profile-status/profile-status-hooks.tsx","components/profile/ui/profile-info/description/profile-status/profile-data-form/profile-data-form.tsx","components/profile/ui/profile-info/description/description.tsx","components/profile/ui/profile-info/profile-info.tsx","webpack://samurai-way/./src/components/profile/ui/my-posts/my-posts.module.css?a8d2","webpack://samurai-way/./src/components/profile/ui/my-posts/post/post.module.css?3666","webpack://samurai-way/./src/components/profile/ui/my-posts/posts-avatar/posts-avatar.module.css?339b","components/profile/ui/my-posts/posts-avatar/posts-avatar.tsx","components/profile/ui/my-posts/post/post.tsx","components/profile/ui/my-posts/my-posts.tsx","components/profile/ui/my-posts/my-posts-container.tsx","pages/profile-page.tsx","components/profile/ui/profile-container.tsx","webpack://samurai-way/./src/shared/ui/textarea/textarea.module.css?7bff","shared/ui/textarea/textarea.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"bg\":\"profile-info_bg__RdL5q\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"description_description__lRpeK\",\"info\":\"description_info__9sugq\",\"items_container\":\"description_items_container__zN1hs\",\"desc_sub_title\":\"description_desc_sub_title__72-kh\",\"desc_title\":\"description_desc_title__McVF0\",\"desc_items\":\"description_desc_items__42+7h\",\"desc_item\":\"description_desc_item__OBuDd\",\"avatar_changer\":\"description_avatar_changer__daLAR\"};","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"profile-avatar_img__qNnCu\"};","import React from 'react';\r\nimport s from './profile-avatar.module.css';\r\nimport defaultAvatar from \"../../../assets/img/default-avatar.jpg\";\r\n\r\ntype ProfileAvatarPropsType = {\r\n  avatarUrl: string | null\r\n}\r\n\r\nexport const ProfileAvatar = (props: ProfileAvatarPropsType) => {\r\n    return (\r\n        <img className={s.img}\r\n             src={props.avatarUrl ? props.avatarUrl : defaultAvatar}\r\n             alt=\"profileAvatar\"/>\r\n    );\r\n};","import * as React from 'react';\r\nimport {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n  status: string\r\n  updateStatusThunk: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusHooks = (props: ProfileStatusPropsType) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [status, setStatus] = useState<string>(props.status)\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  }, [props.status]);\r\n\r\n  const handleEditMode = () => {\r\n    if (!editMode){\r\n      setEditMode(true)\r\n    } else {\r\n      setEditMode(false)\r\n      props.updateStatusThunk(status)\r\n    }\r\n  }\r\n  const handleChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        {!editMode\r\n            ?\r\n            <div>\r\n              <span onDoubleClick={handleEditMode}>{props.status || 'No status'}</span>\r\n            </div>\r\n            :\r\n            <div>\r\n              <input type=\"text\" onChange={handleChangeStatus} onBlur={handleEditMode} autoFocus\r\n                     value={status}/>\r\n            </div>\r\n        }\r\n      </div>\r\n  )\r\n}","import {ProfileType} from \"../../../../../../../shared/types\";\r\nimport s from \"../../description.module.css\";\r\nimport s2 from '../../../../../../login/ui/login-form/login-form.module.css'\r\nimport {Button} from \"../../../../../../../shared/ui/button/button\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../../../../../../shared/ui/input/input\";\r\nimport {Textarea} from \"../../../../../../../shared/ui/textarea/textarea\";\r\n\r\ntype ProfileDataFromPropsType = {\r\n  profile: ProfileType\r\n}\r\nexport type FormDataProfileType = {\r\n  fullName: string\r\n  aboutMe: string\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string\r\n}\r\nexport const ProfileDataForm = (\r\n    {\r\n      profile,\r\n      handleSubmit, error\r\n    }: InjectedFormProps<FormDataProfileType, ProfileDataFromPropsType> & ProfileDataFromPropsType) => {\r\n  return (\r\n      <form onSubmit={handleSubmit}>\r\n        <div className={s.items_container}>\r\n          <div className={s.desc_items}><strong className={s.desc_title}>Info:</strong>\r\n            <div className={s.desc_item}>\r\n              <strong className={s.desc_sub_title}>Name: </strong>\r\n              <Field placeholder={'Full Name'} name={'fullName'} validators={[]} component={Input}/>\r\n            </div>\r\n            <div className={s.desc_item}>\r\n              <strong className={s.desc_sub_title}>About Me: </strong>\r\n              <Field placeholder={'About Me'} name={'aboutMe'} validators={[]} component={Input}/>\r\n            </div>\r\n            <div className={s.desc_item}>\r\n              <strong className={s.desc_sub_title}>Looking For a Job: </strong>\r\n              <Field placeholder={''} name={'lookingForAJob'} validators={[]} component={Input} type={'checkbox'}/>\r\n            </div>\r\n            <div className={s.desc_item}>\r\n              <strong className={s.desc_sub_title}>Looking For:</strong>\r\n              <Field placeholder={'Looking For'} name={'lookingForAJobDescription'} validators={[]} component={Textarea}/>\r\n            </div>\r\n          </div>\r\n          <div className={s.desc_items}><strong className={s.desc_title}>Contacts:</strong>\r\n            <div>Contacts</div>: {Object.entries(profile.contacts).map(([key, value]) => {\r\n              return (\r\n                  <div className={s.desc_item}>\r\n                    <strong className={s.desc_sub_title}>{key}: </strong>\r\n                    <Field placeholder={`${key} link`} name={`contacts.${key}`} validators component={Input}/>\r\n                  </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n        <Button onClick={() => {\r\n        }}>Save</Button>\r\n        {error && <div className={s2.form_error}>{error}</div>}\r\n      </form>\r\n  )\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<FormDataProfileType, ProfileDataFromPropsType>({form: 'edit-profile'})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './description.module.css'\r\nimport {ProfileAvatar} from \"../../../../../shared/ui/profile-avatar/profile-avatar\";\r\nimport {ProfileType} from \"../../../../../shared/types\";\r\nimport {ProfileStatusHooks} from \"./profile-status/profile-status-hooks\";\r\nimport {Button} from \"../../../../../shared/ui/button/button\";\r\nimport {\r\n  FormDataProfileType,\r\n  ProfileDataReduxForm\r\n} from \"./profile-status/profile-data-form/profile-data-form\";\r\n\r\ntype DescriptionType = {\r\n  profile: ProfileType\r\n  status: string\r\n  updateStatusThunk: (status: string) => void\r\n  isOwner: boolean\r\n  saveAvatar: (file: File) => void\r\n  saveProfile: (formData: FormDataProfileType) => Promise<void>\r\n}\r\n\r\nexport const Description = (props: DescriptionType) => {\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  const handleAvatarSelect = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      props.saveAvatar(e.target.files[0])\r\n    }\r\n  }\r\n  const toggleEditMode = () => {\r\n    setEditMode(prevState => !prevState)\r\n  }\r\n\r\n  const onSubmit = (formData: FormDataProfileType) => {\r\n    props.saveProfile(formData).then(() => {\r\n      setEditMode(false)\r\n    })\r\n  }\r\n\r\n  return (\r\n      <div className={s.description}>\r\n        <ProfileAvatar avatarUrl={props.profile.photos?.large}/>\r\n        <div className={s.info}>\r\n          {\r\n              props.isOwner &&\r\n              <div className={s.avatar_changer}>\r\n                Change Avatar:\r\n                <input type=\"file\" onChange={handleAvatarSelect}/>\r\n              </div>\r\n          }\r\n          <ProfileStatusHooks status={props.status} updateStatusThunk={props.updateStatusThunk}/>\r\n\r\n          {editMode ? <ProfileDataReduxForm initialValues={props.profile} onSubmit={onSubmit}\r\n                                            profile={props.profile}/> :\r\n              <ProfileData toggleEditMode={toggleEditMode} profile={props.profile} isOwner={props.isOwner}/>}\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string | null\r\n}\r\nexport const Contact = (props: ContactPropsType) => {\r\n  return (\r\n      <div className={s.desc_item}>\r\n        <strong className={s.desc_sub_title}>{props.contactTitle}: </strong>\r\n        {props.contactValue ?\r\n            <a href={props.contactValue}>{props.contactValue}</a> : 'No Link'}\r\n      </div>\r\n  )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  toggleEditMode: () => void\r\n}\r\nconst ProfileData = ({profile, isOwner, toggleEditMode}: ProfileDataPropsType) => {\r\n  return (\r\n      <>\r\n        <div className={s.items_container}>\r\n          <div className={s.desc_items}><strong className={s.desc_title}>Info:</strong>\r\n            <div className={s.desc_item}><strong\r\n                className={s.desc_sub_title}>Name: </strong>{profile.fullName}</div>\r\n            <div className={s.desc_item}><strong className={s.desc_sub_title}>About\r\n              Me: </strong>{profile.aboutMe}</div>\r\n            <div className={s.desc_item}><strong className={s.desc_sub_title}>Looking For a\r\n              Job: </strong> {profile.lookingForAJob ? 'Yes' : 'No'}</div>\r\n            <div className={s.desc_item}><strong className={s.desc_sub_title}>Looking\r\n              For: </strong>{profile.lookingForAJobDescription || 'No description'}\r\n            </div>\r\n          </div>\r\n          <div className={s.desc_items}><strong className={s.desc_title}>Contacts:</strong>\r\n            {Object.entries(profile.contacts).map(([key, value]) => {\r\n              return <Contact key={key} contactTitle={key} contactValue={value}/>\r\n            })}\r\n          </div>\r\n        </div>\r\n        {isOwner && <Button onClick={toggleEditMode}>Edit profile</Button>}\r\n      </>\r\n  )\r\n}","import s from \"./profile-info.module.css\";\r\nimport {Description} from \"./description/description\";\r\nimport React from \"react\";\r\nimport {Preloader} from \"../../../../shared/ui/preloader/preloader\";\r\nimport {ProfileType} from \"../../../../shared/types\";\r\nimport {FormDataProfileType} from \"./description/profile-status/profile-data-form/profile-data-form\";\r\n\r\ntype ProfileInfoType = {\r\n  profile: ProfileType\r\n  status: string\r\n  updateStatusThunk: (status: string) => void\r\n  isOwner: boolean\r\n  saveAvatar: (file: File) => void\r\n  saveProfile: (formData: FormDataProfileType) => Promise<void>\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoType) => {\r\n  if (!props.profile) return <Preloader/>\r\n  return (\r\n      <>\r\n        <div className={s.bg}>\r\n          <img\r\n              src=\"https://i.ytimg.com/vi/yLRaDfPSB-4/hq720.jpg?sqp=-oaymwEhCK4FEIIDSFryq4qpAxMIARUAAAAAGAElAADIQj0AgKJD&rs=AOn4CLBJJjQdF_u5FifTIMKMDhilm3S0hA\"\r\n              alt=\"\"/>\r\n        </div>\r\n        <Description saveProfile={props.saveProfile} isOwner={props.isOwner} saveAvatar={props.saveAvatar} profile={props.profile} status={props.status} updateStatusThunk={props.updateStatusThunk}/>\r\n      </>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"my-posts_posts__hBxUP\",\"posts_wrapper\":\"my-posts_posts_wrapper__2K+UT\",\"new_post\":\"my-posts_new_post__tbvez\",\"btn_block\":\"my-posts_btn_block__6Ux0C\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"post_item__ff5TC\",\"post_text\":\"post_post_text__ZWYkx\"};","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"posts-avatar_img__0o5ck\"};","import React from 'react';\r\nimport s from \"./posts-avatar.module.css\";\r\nimport defaultAvatar from '../../../../../assets/img/default-avatar.jpg'\r\n\r\ntype PostsAvatarPropsType = {\r\n  avatar: string | null\r\n}\r\n\r\nexport const PostsAvatar = (props: PostsAvatarPropsType) => {\r\n  return (\r\n      <img className={s.img}\r\n           src={!!props.avatar\r\n               ? props.avatar\r\n               : defaultAvatar}\r\n           alt=\"\"/>\r\n  );\r\n};","import React from 'react';\r\nimport s from \"./post.module.css\";\r\nimport {PostsAvatar} from \"../posts-avatar/posts-avatar\";\r\nimport {Button} from \"../../../../../shared/ui/button/button\";\r\n\r\ntype Props = {\r\n  message: string\r\n  likesCount: number\r\n  avatar: string | null\r\n}\r\n\r\nexport const Post = ({message, likesCount, ...props}: Props) => {\r\n  return (\r\n      <div className={s.item}>\r\n        <PostsAvatar avatar={props.avatar}/>\r\n        <div className={s.post_text}>{message}</div>\r\n        <Button onClick={() => {\r\n        }}>Like: <strong>{likesCount}</strong></Button>\r\n      </div>\r\n  );\r\n};","import React from 'react';\r\nimport s from \"./my-posts.module.css\";\r\nimport {Post} from \"./post/post\";\r\nimport {Button} from \"../../../../shared/ui/button/button\";\r\nimport {ProfilePageType} from \"../../../../shared/types\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../shared/utils\";\r\nimport {Textarea} from \"../../../../shared/ui/textarea/textarea\";\r\nimport {FormDataType} from \"../../../../shared/types\";\r\n\r\ntype MyPostsType = {\r\n  addPost: (newPost: string) => void\r\n  profilePage: ProfilePageType\r\n  avatar: string | null\r\n}\r\n\r\n\r\n\r\nexport class MyPosts extends React.PureComponent<MyPostsType> {\r\n  shouldComponentUpdate(nextProps: Readonly<MyPostsType>, nextState: Readonly<{}>): boolean {\r\n    return nextProps != this.props || nextState != this.state\r\n  }\r\n  render() {\r\n    const postsList = this.props.profilePage.postsData\r\n        .map((post) => (\r\n            <Post key={post.id} message={post.message} avatar={this.props.avatar} likesCount={post.likes}/>\r\n        ))\r\n    const postsItems = this.props.profilePage.postsData.length ? postsList : <p>No posts. Lets post something!</p>\r\n\r\n    const handleAddPost = (values: FormDataType) => {\r\n      if (values.newPost) this.props.addPost(values.newPost)\r\n    }\r\n\r\n    return (\r\n        <div className={s.posts_wrapper}>\r\n          <h3>My Posts</h3>\r\n          <AddPostReduxForm onSubmit={handleAddPost}/>\r\n          <div className={s.posts}>\r\n            {postsItems}\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n  return (\r\n      <form className={s.new_post} onSubmit={props.handleSubmit}>\r\n        <div>\r\n          <label>\r\n            <Field validate={[required, maxLength10]}\r\n                   name={'newPost'} placeholder={'Enter new post'} component={Textarea}/>\r\n          </label>\r\n        </div>\r\n        <div className={s.btn_block}>\r\n          <div>\r\n            <Button onClick={() => {\r\n            }}>Add Post</Button>\r\n          </div>\r\n          <div>\r\n            <Button onClick={() => {\r\n            }}>Clear</Button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n  )\r\n}\r\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'newPost'})(AddPostForm)","import {addPostAC} from \"../../model/profile-reducer\";\r\nimport {MyPosts} from \"./my-posts\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../shared/types\";\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n        avatar: state.profilePage.profile.photos.small\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps,{\r\n    addPost: addPostAC,\r\n})(MyPosts)","import React from \"react\";\r\nimport {ProfileInfo} from \"../components/profile/ui/profile-info/profile-info\";\r\nimport {MyPostsContainer} from \"../components/profile/ui/my-posts/my-posts-container\";\r\nimport {ProfileType} from \"../shared/types\";\r\nimport {\r\n  FormDataProfileType\r\n} from \"../components/profile/ui/profile-info/description/profile-status/profile-data-form/profile-data-form\";\r\n\r\ntype ProfilePageType = {\r\n  profile: ProfileType\r\n  status: string\r\n  updateStatusThunk: (status: string) => void\r\n  isOwner: boolean\r\n  saveAvatar: (file: File) => void\r\n  saveProfile: (formData: FormDataProfileType) => Promise<void>\r\n}\r\n\r\nexport const ProfilePage = (props: ProfilePageType) => {\r\n  return (\r\n      <div>\r\n        <ProfileInfo saveProfile={props.saveProfile} isOwner={props.isOwner} saveAvatar={props.saveAvatar} profile={props.profile} status={props.status} updateStatusThunk={props.updateStatusThunk}/>\r\n        <MyPostsContainer/>\r\n      </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport {ProfilePage} from \"../../../pages/profile-page\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProfileType, StateType} from \"../../../shared/types\";\r\nimport {getUserProfileTC, getUserStatusTC, saveAvatarTC, saveProfileTC, updateStatusTC} from \"../model/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../../shared/hoc\";\r\nimport {compose} from \"redux\";\r\nimport {FormDataProfileType} from \"./profile-info/description/profile-status/profile-data-form/profile-data-form\";\r\n\r\ninterface RouteParams {\r\n  userId: string\r\n}\r\n\r\ntype ProfileApiType = {\r\n  getUserProfileThunk: (userId: number) => void\r\n  profile: ProfileType\r\n  isAuth: boolean\r\n  getUserStatusThunk: (userId: number) => void\r\n  updateStatusThunk: (status: string) => void\r\n  userId: number\r\n  status: string\r\n  saveAvatar: (file: File) => void\r\n  saveProfile: (formData: FormDataProfileType) => Promise<void>\r\n} & RouteComponentProps<RouteParams>\r\n\r\nexport class ProfileApiComponent extends React.Component<ProfileApiType> {\r\n  refreshProfile (){\r\n    let userId = parseInt(this.props.match.params.userId, 10);\r\n    if (!userId) {\r\n      userId = this.props.userId\r\n      if (!userId) this.props.history.push('/login')\r\n    }\r\n    this.props.getUserProfileThunk(userId)\r\n    this.props.getUserStatusThunk(userId)\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n  componentDidUpdate(prevProps: Readonly<ProfileApiType>, prevState: Readonly<{}>, snapshot?: any) {\r\n    if (prevProps.match.params.userId !== this.props.match.params.userId){\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <ProfilePage {...this.props} saveAvatar={this.props.saveAvatar} isOwner={!this.props.match.params.userId} profile={this.props.profile}/>\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: StateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  userId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nconst ComposedComponent = compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n      getUserProfileThunk: getUserProfileTC,\r\n      getUserStatusThunk: getUserStatusTC,\r\n      updateStatusThunk: updateStatusTC,\r\n      saveAvatar: saveAvatarTC,\r\n      saveProfile: saveProfileTC,\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileApiComponent)\r\n\r\nconst ProfileContainer= () => <ComposedComponent/>\r\nexport default ProfileContainer\r\n","// extracted by mini-css-extract-plugin\nexport default {\"textarea\":\"textarea_textarea__IfJNB\",\"error\":\"textarea_error__jFV-e\",\"error_text\":\"textarea_error_text__IOBRv\"};","import React, {forwardRef} from 'react';\r\nimport s from './textarea.module.css';\r\n\r\n\r\nexport const Textarea = forwardRef<HTMLTextAreaElement, any>(\r\n    ({input, meta, ...props}) => {\r\n\r\n      const isError = meta.touched && meta.error\r\n\r\n      return (\r\n          <div className={isError && s.error}>\r\n            <textarea className={s.textarea} {...input} {...props}/>\r\n            <div>\r\n              {isError && <span className={s.error_text}>{meta.error}</span>}\r\n            </div>\r\n          </div>\r\n      )\r\n    }\r\n)\r\n"],"names":["ProfileAvatar","props","className","s","src","avatarUrl","defaultAvatar","alt","ProfileStatusHooks","useState","editMode","setEditMode","status","setStatus","useEffect","handleEditMode","updateStatusThunk","type","onChange","e","currentTarget","value","onBlur","autoFocus","onDoubleClick","ProfileDataReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","Field","placeholder","name","validators","component","Input","Textarea","Object","entries","contacts","map","key","onClick","s2","Description","photos","large","isOwner","target","files","length","saveAvatar","initialValues","formData","saveProfile","then","ProfileData","toggleEditMode","prevState","Contact","contactTitle","contactValue","href","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileInfo","PostsAvatar","avatar","Post","message","likesCount","MyPosts","nextProps","nextState","this","state","postsList","profilePage","postsData","post","likes","id","postsItems","AddPostReduxForm","values","newPost","addPost","React","maxLength10","maxLengthCreator","validate","required","MyPostsContainer","connect","small","addPostAC","ProfilePage","ProfileApiComponent","userId","parseInt","match","params","history","push","getUserProfileThunk","getUserStatusThunk","refreshProfile","prevProps","snapshot","ComposedComponent","compose","auth","isAuth","getUserProfileTC","getUserStatusTC","updateStatusTC","saveAvatarTC","saveProfileTC","withRouter","WithAuthRedirect","forwardRef","input","meta","isError","touched"],"sourceRoot":""}